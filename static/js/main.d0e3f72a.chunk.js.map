{"version":3,"sources":["LastUpdated.js","ViewOnGitHub.js","ProjectTitle.js","Step.js","config/data.js","Steps.js","MainContainer.js","App.js","serviceWorker.js","index.js"],"names":["LastUpdated","className","process","ViewOnGitHub","rel","href","target","style","color","fontSize","ProjectTitle","Step","step","this","props","name","header","subSteps","map","subStep","key","React","Component","steps","Steps","MainContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RAWeA,MARf,WACE,OACE,yBAAKC,UAAU,eAAf,kBACkBC,wB,uBCSPC,MAXf,WACE,OACE,uBAAGF,UAAU,sBAAsBG,IAAI,sBAAsBC,KAAK,iEAAiEC,OAAO,UACxI,yBAAKL,UAAU,0BACb,kBAAC,IAAD,CAAYM,MAAO,CAAEC,MAAO,SAAWC,SAAS,UAChD,kDCEOC,MARf,WACE,OACE,yBAAKT,UAAU,gBAAf,qC,4BCgBWU,G,6KAjBD,IACEC,EAASC,KAAKC,MAAdF,KACR,OACI,6BACI,4BACI,8BAAOA,EAAKG,KAAZ,KAAoBH,EAAKI,SAE7B,4BACKJ,EAAKK,SAASC,KAAI,SAACC,EAASC,GAAV,OACf,gD,GAVLC,IAAMC,YCHZC,EAAQ,CACjB,CACIR,KAAM,SACNC,OAAQ,2GACRC,SAAU,CACN,qBACA,4BAIR,CACIF,KAAM,SACNC,OAAQ,2GACRC,SAAU,KCMHO,E,uKAZP,OACI,6BACKD,EAAML,KAAI,SAACN,EAAMQ,GAAP,OACP,kBAAC,EAAD,CAAMA,IAAKA,EAAKR,KAAMA,Y,GALtBS,IAAMC,W,MCOXG,MARf,WACI,OACI,yBAAKxB,UAAU,kBACX,kBAAC,EAAD,QCeGyB,MAff,WACE,OACE,yBAAKzB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,MACA,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCJY0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d0e3f72a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction LastUpdated() {\n  return (\n    <div className=\"LastUpdated\">\n      Last Updated - {process.env.REACT_APP_BUILD_TIME}\n    </div>\n  );\n}\n\nexport default LastUpdated;\n","import React from 'react';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport './ViewOnGitHub.css';\n\nfunction ViewOnGitHub() {\n  return (\n    <a className=\"ViewOnGitHub-anchor\" rel=\"noopener noreferrer\" href=\"https://github.com/rounakraj8/react-build-using-github-actions\" target=\"_blank\">\n      <div className=\"ViewOnGitHub-container\">\n        <GitHubIcon style={{ color: 'black' }} fontSize=\"large\" />\n        <div>View On GitHub</div>\n      </div>\n    </a>\n  );\n}\n\nexport default ViewOnGitHub;\n","import React from 'react';\nimport './App.css';\n\nfunction ProjectTitle() {\n  return (\n    <div className=\"ProjectTitle\">\n      react-build-using-github-actions\n    </div>\n  );\n}\n\nexport default ProjectTitle;\n","import React from 'react';\nimport './Step.css';\n\nclass Step extends React.Component {\n    render() {\n        const { step } = this.props;\n        return (\n            <div>\n                <h3>\n                    <span>{step.name}  {step.header}</span>\n                </h3>\n                <ul>\n                    {step.subSteps.map((subStep, key) =>\n                        <li>subStep</li>\n                    )}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default Step;","export const steps = [\n    {\n        name: \"Step 1\",\n        header: 'We need to use GitHub actions to build the artifact as soon as we push our code to GitHub master branch.',\n        subSteps: [\n            \"Create a React App\",\n            \"Push the code to GitHub\",\n        ]\n\n    },\n    {\n        name: \"Step 2\",\n        header: 'We need to use GitHub actions to build the artifact as soon as we push our code to GitHub master branch.',\n        subSteps: [\n        ]\n    }\n];","import React from 'react';\nimport Step from './Step';\nimport { steps } from './config/data.js';\n\n\nclass Steps extends React.Component {\n    render() {\n        return (\n            <div>\n                {steps.map((step, key) =>\n                    <Step key={key} step={step} />\n                )}\n            </div>\n        );\n    }\n}\n\n\n\nexport default Steps;","import React from 'react';\nimport Steps from './Steps';\nimport './MainContainer.css'\n\nfunction MainContainer() {\n    return (\n        <div className=\"Main-container\">\n            <Steps/>\n        </div>\n    );\n}\n\nexport default MainContainer;","import React from 'react';\nimport './App.css';\nimport LastUpdated from './LastUpdated';\nimport ViewOnGitHub from './ViewOnGitHub';\nimport ProjectTitle from './ProjectTitle';\nimport MainContainer from './MainContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ProjectTitle />\n        <ViewOnGitHub />\n      </header>\n      <MainContainer/>\n      <footer className=\"App-footer\">\n        <LastUpdated />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}